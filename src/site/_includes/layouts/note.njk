---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {%include "components/pageheader.njk"%}
    {% for imp in dynamics.common.head %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.notes.head %}
      {% include imp %}
    {% endfor %}
  </head>
  <div id="hiddenCover" class="cover">
    <script defer src="https://unpkg.com/@dotlottie/player-component@2.7.12/dist/dotlottie-player.mjs" type="module"></script>
    <dotlottie-player src="https://lottie.host/de011357-441a-46b6-adb4-644111f48887/VFBooHMMx9.lottie" background="transparent" speed="1" style="width: 600px; height: 600px; padding-top: 200px;" loop autoplay></dotlottie-player>
    <script defer src="https://unpkg.com/@dotlottie/player-component@2.7.12/dist/dotlottie-player.mjs" type="module"></script>
    <dotlottie-player src="https://lottie.host/d8a598d6-4180-4f0c-b989-2f651a729ce4/WFEbVnKVKp.lottie" background="transparent" speed="1" style="width: 300px; height: 300px; padding-bottom: 150px; padding-left: 30px;" loop autoplay></dotlottie-player>
    <div id="coverConstellation" class="constellation"></div> 
  </div>
  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">
    <div id="sky" class="nightsky">
      <div id="constellation" class="constellation"></div> 
      <div id="meteorShower" class="meteorShower"></div>
    {%include "components/notegrowthhistory.njk"%}
    {% if settings.dgEnableSearch === true%}
      <div class="nav-top">
        <a href="/" style="text-decoration: none; display: block;">
            <h1 style="text-align:left; margin:0; padding:20px;">{{meta.siteName}}</h1>
        </a>
        <div style="display:flex; justify-content: center">
          {% include "components/searchButton.njk" %}
        </div>
      </div>
    {%endif%}

    {% if settings.dgEnableSearch === true %}
      {%include "components/searchContainer.njk"%}
    {% endif %}
    {% macro menuItem(fileOrFolderName, fileOrFolder, step, currentPath) %}
    {%if fileOrFolder.isNote or fileOrFolder.isFolder%}
        <div x-show="isOpen" style="display:none" class="{{'filelist' if step>0}}">
            {%if fileOrFolder.isNote and not fileOrFolder.hide %}
                <div @click.stop class="notelink {{ 'active-note' if fileOrFolder.permalink === permalink}}">
                    {%- if not meta.noteIconsSettings.filetree -%}<i icon-name="sticky-note" aria-hidden="true"></i>{%- endif -%}
                    <a data-note-icon="{{fileOrFolder.noteIcon}}" style="text-decoration: none;" class="filename" href="{{fileOrFolder.permalink}}">{{fileOrFolder.name}} </a>
                </div>
            {% elif fileOrFolder.isFolder%}
                <div class="folder inner-folder"  x-data="{isOpen: $persist(false).as('{{currentPath}}')}" @click.stop="isOpen=!isOpen">
                    <div class="foldername-wrapper align-icon">
                    <i x-show="isOpen" style="display: none;"  icon-name="chevron-down"></i>
                    <i x-show="!isOpen"  icon-name="chevron-right"></i>
                    <span class="foldername">{{fileOrFolderName}}</span>
                    </div>
                    {% for fileOrFolderName, child in fileOrFolder %}
                        {{menuItem(fileOrFolderName, child, step+1, (currentPath+"/"+fileOrFolderName))}}
                    {% endfor %}
                </div>
            {% endif %}
        </div>
        {%endif%}
    {% endmacro %}
    <div class="main-container">
      {% if settings.dgShowFileTree !== true %}
        {%include "components/navbar.njk"%}
      {%else%}
        {%include "components/filetree.njk"%}
      {% endif %}
      <main class="content cm-s-obsidian {{contentClasses}}" style="margin:-50px 0 0 0;">
        <header>
          {% if settings.dgShowInlineTitle === true %}
            <h1 data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</h1>
          {% endif %}
          <div class="header-meta">
            {% if settings.dgShowTags === true and tags %}
              <div class="header-tags">
                {% for tag in tags %}
                  {% if tag != 'gardenEntry' and tag !='note' %}
                    <a class="tag" onclick="toggleTagSearch(this)">
                     #{{tag}}
                    </a>
                  {% endif %}
                {% endfor %}
             </div>
            {% endif %}
            {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
            <div class="timestamps">
              {%- if meta.timestampSettings.showCreated and created -%}
                <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
              {%- endif -%}
              {%- if meta.timestampSettings.showUpdated and updated -%}
                <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
              {%- endif -%}
            </div>
            {%- endif -%}
          </div>
        {% for imp in dynamics.common.header %}
          {% include imp %}
        {% endfor %}
        {% for imp in dynamics.notes.header %}
          {% include imp %}
        {% endfor %}
        </header>
        {% for imp in dynamics.common.beforeContent %}
          {% include imp %}
        {% endfor %}
        {% for imp in dynamics.notes.beforeContent %}
         {% include imp %}
        {% endfor %}
        {{ content | hideDataview | taggify | link | safe}}
        {% for imp in dynamics.common.afterContent %}
          {% include imp %}
        {% endfor %}
        {% for imp in dynamics.notes.afterContent %}
          {% include imp %}
        {% endfor %}
        {% for imp in dynamics.notes.footer %}
          {% include imp %}
        {% endfor %}
        <script>
          let iframeElements = document.querySelectorAll('.container-root > iframe');
          for(let iframeEl of iframeElements){
            let iframeUrl = iframeEl.getAttribute('src');
            if(iframeUrl.includes("spotify")){
              iframeEl.classList.add('spotify');
              iframeEl.classList.remove('youtube');
            }
            if(iframeUrl.includes("youtube")){
              iframeEl.classList.remove('spotify');
              iframeEl.classList.add('youtube');
            }
          }
          iframeElements = document.querySelectorAll('iframe');
          for(let iframeEl of iframeElements){
            let iframeUrl = iframeEl.getAttribute('src');
            if(iframeUrl.includes("youtube")){
              iframeEl.style.width = "100%";
              let delay = 300;
              let timer = null;
              window.addEventListener('resize', function(){
	              clearTimeout(timer);
	              timer = setTimeout(function(){
                  if (window.innerWidth <= 500) {
      		          iframeEl.setAttribute('height', 270);
   		            }else{
                    iframeEl.setAttribute('height', 400);
                  }
	              }, delay);
              });
            }
          }
        </script>
      </main>
      {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true%}
        {%include "components/sidebar.njk"%}
      {% endif %}
    </div>
    {% if settings.dgLinkPreview === true %}
      {%include "components/linkPreview.njk"%}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}
      {% include imp %}
    {% endfor %}
    </div>
    <div id="moon" class="moon">
      <div id="moonImg" class="moonImg"></div>
    </div>
    <script defer>
        function initCoverStars(){
        const windowWidth = screen.width;
        const windowHeight = screen.height;

        function getRandomValue(max) {
          return Math.floor(Math.random() * max);
        }

        function getRandomArbitrary(min, max) {
        return Math.floor(Math.random() * (max - min)) + min;
        }

      const style = ['style1', 'style2', 'style3'];
      const opacity = ['opacity1', 'opacity1', 'opacity1', 'opacity2', 'opacity3'];
      const twinkle = [
        'twinkle1',
        'twinkle1',
        'twinkle1',
        'twinkle2',
        'twinkle2',
        'twinkle3',
        'twinkle4',
      ];

      let constellation = document.getElementById("coverConstellation");
      let star = "";
      let numberOfStars = 250;
      const x = getRandomValue(windowWidth);
      const y = getRandomValue(windowHeight);

      for(let i = 0; i < numberOfStars; i++){
        let _s = getRandomValue(3);
        let _o = getRandomValue(5);
        let _t = getRandomValue(7);
        let className = "star " + style[_s] + " " + opacity[_o] + " " + twinkle[_t];

        star += "<span class='" + className + "' style='animation-delay: ." + getRandomArbitrary(0, 9) + "s; left: " + 
        getRandomArbitrary(0, windowWidth) + "px; top: " + getRandomArbitrary(0, windowHeight) + "px;'></span>"; 
      }

      constellation.innerHTML = star;

    }
function initStars(){
  const windowWidth = screen.width;
  const windowHeight = screen.height;

  function getRandomValue(max) {
    return Math.floor(Math.random() * max);
  }

  function getRandomArbitrary(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  }

  const style = ['style1', 'style2', 'style3'];
  const opacity = ['opacity1', 'opacity1', 'opacity1', 'opacity2', 'opacity3'];
  const twinkle = [
    'twinkle1',
    'twinkle1',
    'twinkle1',
    'twinkle2',
    'twinkle2',
    'twinkle3',
    'twinkle4',
  ];

    let constellation = document.getElementById("constellation");
    let star = "";
    let numberOfStars = 250;
    const x = getRandomValue(windowWidth);
    const y = getRandomValue(windowHeight);

    for(let i = 0; i < numberOfStars; i++){
      let _s = getRandomValue(3);
      let _o = getRandomValue(5);
      let _t = getRandomValue(7);
      let className = "star " + style[_s] + " " + opacity[_o] + " " + twinkle[_t];
  
      star += "<span class='" + className + "' style='animation-delay: ." + getRandomArbitrary(0, 9) + "s; left: " + 
      getRandomArbitrary(0, windowWidth) + "px; top: " + getRandomArbitrary(0, windowHeight) + "px;'></span>"; 
    }

    constellation.innerHTML = star;

    let randomNum = 5000;

    setTimeout(function(){
      if(window.localStorage.getItem('site-theme') == 'dark'){
        shootingStars();
      }
    }, randomNum);

    function shootingStars(){
        setTimeout(shootingStars, randomNum);
        randomNum = getRandomArbitrary(5000, 10000);
        const _s = getRandomArbitrary(0, 3);
        let shootingStar = "<div class='shootingStar " + style[_s] + "'></div>";
        document.getElementsByClassName('meteorShower')[0].innerHTML = shootingStar;
        setTimeout(function(){ 
           document.getElementsByClassName('meteorShower')[0].innerHTML = ""; 
        }, 1000);
    }
}

function init(){
    let timer = "";
    let theme = window.localStorage.getItem('site-theme') || "dark";

    let timezoneTheme = "";
    let today = new Date();
    let todayHours = today.getHours();
    if((todayHours >= 18 && todayHours < 24) || (todayHours >= 0 && todayHours < 7)){
      timezoneTheme = 'dark';
    }else{
      timezoneTheme = 'light';
    }

    function changeTimezoneTheme(){
      if(theme !== 'auto'){
        clearInterval(timer);
        timer = '';
        return;
      }
      let today = new Date();
      let todayHours = today.getHours();
      if((todayHours >= 18 && todayHours < 24) || (todayHours >= 0 && todayHours < 7)){
        if(timezoneTheme !== 'dark'){
          setTheme('dark', false);
          const event = new Event('themeChanged');
          document.dispatchEvent(event);
        }
        timezoneTheme = 'dark';
      }else{
        if(timezoneTheme !== 'light'){
          setTheme('light', false);
          const event = new Event('themeChanged');
          document.dispatchEvent(event);
        }
        timezoneTheme = 'light';
      }
    }
    if(theme == 'dark'){
      setThemeIcon(theme);
      initStars();
    }
    if(theme == 'light'){
      setTheme(theme, true);
    }
    if(theme == 'auto'){
      setTheme(theme, true);
      if(!timer){
        timer = setInterval(changeTimezoneTheme, 60000);
      }
    }

    window.theme = theme;
    window.localStorage.setItem('site-theme', theme);
  
    if(window.localStorage.getItem('site-theme') == 'dark' || (window.localStorage.getItem('site-theme') == 'auto' && timezoneTheme == 'dark')){
      initStars();
    }
    if(window.localStorage.getItem('prevTheme')){
      initCoverStars();
      document.getElementById('hiddenCover').style.display = "flex";
      setTimeout(() => {
        document.getElementById('hiddenCover').classList.add('fadeOutFromLeft-animation');
        setTimeout(function(){ 
          document.getElementById('hiddenCover').classList.remove('fadeInFromLeft-animation');
          document.getElementById('hiddenCover').style.display = "none";
        },601);
      }, 1250);
    } else {
      document.getElementById('hiddenCover').style.display = "none";
    }
  }
  document.addEventListener("DOMContentLoaded", init);
  window.onload = () => {
    const event = new Event('themeChanged');
    document.dispatchEvent(event);
  }
  </script>
  </body>
</html>
